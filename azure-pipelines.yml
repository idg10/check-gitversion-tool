trigger:
  branches:
    include:
    - main
    - feature/*
  tags:
    include:
    - '*'

resources:
  repositories:
    - repository: recommended_practices
      type: github
      name: endjin/Endjin.RecommendedPractices.AzureDevopsPipelines.GitHub
      endpoint: github.com_idg10

jobs:
- job: Build
  pool:
    vmImage: 'windows-latest'

  variables:
    SolutionToBuild: Solutions/CheckGitversion.sln
    BuildConfiguration: Release

  steps:
  - template: install-net-runtimes-and-sdks.yml
    parameters:
      runtimes: [2.1.x, 3.1.x]
      sdks: [5.x]

  - task: DotNetCoreCLI@2
    displayName: 'Install GitVersion (Global Tools Linux Build Agent Workaround)'
    inputs:
      command: custom
      custom: 'tool'
      arguments: 'install -g GitVersion.Tool --version 5.6.6'

  - script: 'dotnet-gitversion /output buildserver /nofetch'
    name: 'RunGitVersion'
    displayName: 'Run GitVersion'

  - task: DotNetCoreCLI@2
    displayName: 'Restore & Build'
    inputs:
      command: 'build'
      projects: $(SolutionToBuild)
      arguments: '--configuration $(BuildConfiguration) /p:Version=$(GitVersion.SemVer)'
      #versioningScheme: byBuildNumber
      #buildProperties: 'EndjinRepositoryUrl="$(Build.Repository.Uri)"'

  - task: DotNetCoreCLI@2
    displayName: 'Run Executable Specifications'
    inputs:
      command: 'test'
      projects: $(SolutionToBuild)
      arguments: '-c $(BuildConfiguration) --no-build --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

# - template: templates/build.and.release.yml@recommended_practices
#   parameters:
#     vmImage: 'windows-latest'
#     service_connection_nuget_org: $(Idg10_Service_Connection_NuGet_Org)
#     service_connection_github: $(Idg10_Service_Connection_GitHub)
#     solution_to_build: $(Idg_Solution_To_Build)
#     netSdkVersion: '3.x'